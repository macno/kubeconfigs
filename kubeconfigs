_kubeconfigs_path=${KUBECONFIGS_PATH:-$(dirname "$0")}
_kubeconfigs_projects=${_kubeconfigs_path}/projects
_kubeconfigs_confs=${_kubeconfigs_path}/configs
if [ -z $2 ]; then
  echo "$0 project cluster [namespace]"
else
  project=$1
  cluster=$2
  namespace=${3:-default}
  unset _kubeconfig
  if [ ! -d ${_kubeconfigs_projects}/${project} ]; then
    echo "Project \"${project}\" does not exist."
    echo ""
    echo "Configured projects:"
    echo ""
    for i in $(find ${_kubeconfigs_projects} -type d -maxdepth 1 | grep -v ''${_kubeconfigs_projects}'$' | sort); do
      echo "\t$(basename $i)"
    done
    echo ""
  else
    if [ -f ${_kubeconfigs_projects}/${project}/${cluster}.yml ]; then
      _kubeconfig=${_kubeconfigs_projects}/${project}/${cluster}.yml
    elif [ -f ${_kubeconfigs_projects}/${project}/${cluster}.yaml ]; then
      _kubeconfig=${_kubeconfigs_projects}/${project}/${cluster}.yaml
    fi
    if [ -z ${_kubeconfig} ]; then
      echo "Cluster \"${cluster}\" in project ${project} not found"
      echo ""
      echo "Configured clusters in project \"${project}\":"
      echo ""
      for i in $(find ${_kubeconfigs_projects}/${project} -name "*.yaml" -type f | sort); do
        echo "\t$(basename $i | sed -E 's/\.y[a]?ml//')"
      done
      echo ""
    else
      if [ ! -d ${_kubeconfigs_confs} ]; then
        mkdir ${_kubeconfigs_confs}
      fi
      _kubeconfig_dest=${_kubeconfigs_confs}/${project}_${cluster}_${namespace}.yml
      cp -f ${_kubeconfig} ${_kubeconfig_dest}
      export KUBECONFIG=${_kubeconfig_dest}
      kubectl config set-context --current --namespace ${namespace} >/dev/null
    fi
  fi
fi
